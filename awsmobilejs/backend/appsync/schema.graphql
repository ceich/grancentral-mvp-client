schema {
	query: Query
	mutation: Mutation
}

type Account {
	album: [S3Object!]
	createdAt: String!
	elders: [Elder!]!
	id: ID!
	members: [Member!]!
	name: String!
	ownerId: ID!
}

type CreateAccountResult {
	account: Account
}

type CreateEventResult {
	event: Event
}

type CreateMemberResult {
	member: Member
}

type DeleteMemberResult {
	member: Member
}

type Elder {
	birthday: AWSDate!
	name: String!
}

type Event {
	accountId: ID!
	createdAt: String!
	id: ID!
	media: S3Object
	referenceId: ID
	text: String
	userId: ID
}

type EventConnection {
	items: [Event]
	nextToken: String
}

type FindOrCreateUserResult {
	user: User
}

type Member {
	account: Account
	role: String
	user: User
}

type Mutation {
	createAccount(input: CreateAccountInput!): CreateAccountResult
	createEvent(input: CreateEventInput!): CreateEventResult
	createMember(input: CreateMemberInput!): CreateMemberResult
	deleteMember(input: DeleteMemberInput!): DeleteMemberResult
	findOrCreateUser(input: FindOrCreateUserInput!): FindOrCreateUserResult
	updateMember(input: UpdateMemberInput!): UpdateMemberResult
	updateUser(input: UpdateUserInput!): UpdateUserResult
}

type Query {
	getAccount(id: ID!): Account
	getEvent(id: ID!): Event
	listEvents(accountId: ID!, limit: Int, nextToken: String): EventConnection
	me: User
}

# AWS AppSync has special support for S3 objects; see the documentation here:
## https://docs.aws.amazon.com/appsync/latest/devguide/building-a-client-app-react.html#complex-objects
type S3Object {
	bucket: String!
	key: String!
	region: String!
}

type UpdateMemberResult {
	member: Member
}

type UpdateUserResult {
	user: User
}

type User {
	avatar: S3Object
	createdAt: String!
	email: AWSEmail!
	id: ID!
	members: [Member!]
	name: String!
	phone: AWSPhone
	pictures: [S3Object!]
}

# Not used directly in schema, but see "role" field in type Member above. The
## UI should transform each value to lowercase, change underscores to hyphens,
## and then present the list to the user for choice. The selected choice,
## if not "other", should be used as the role for the account member.
## Choice of "other" should cause the UI to prompt for a custom role string.
enum Role {
	SON
	DAUGHTER
	SON_IN_LAW
	DAUGHTER_IN_LAW
	SISTER
	BROTHER
	SPOUSE
	PARTNER
	NIECE
	NEPHEW
	COUSIN
	FRIEND
	CAREGIVER
	OTHER
}

input CreateAccountInput {
	elders: [ElderInput!]!
	name: String!
	ownerId: ID!
	role: String!
}

input CreateEventInput {
	accountId: ID!
	media: S3ObjectInput
	referenceId: ID
	text: String
	userId: ID
}

input CreateMemberInput {
	accountId: ID!
	role: String!
	userId: ID!
}

input DeleteMemberInput {
	accountId: ID!
	userId: ID!
}

input ElderInput {
	birthday: AWSDate!
	name: String!
}

input FindOrCreateUserInput {
	email: AWSEmail!
	id: ID!
	name: String!
}

# S3ObjectInput is used for two purposes: uploading new objects and
## re-specifying existing objects.
## For the latter case, localUri and mimeType will be null.
input S3ObjectInput {
	bucket: String!
	key: String!
	localUri: String
	mimeType: String
	region: String!
}

input UpdateMemberInput {
	accountId: ID!
	role: String!
	userId: ID!
}

input UpdateUserInput {
	avatar: S3ObjectInput
	email: AWSEmail
	id: ID!
	name: String
	phone: AWSPhone
	pictures: [S3ObjectInput!]
}
