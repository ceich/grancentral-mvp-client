type Account {
  created_at: String!
  id: ID!
  members: [Member!]!
  name: String!
}

type AccountConnection {
  items: [Account!]!
  nextToken: String
}

type Event {
  account_id: ID!
  created_at: String!
  id: ID!
  text: String!
  user_id: ID!
}

type EventConnection {
  items: [Event]
  nextToken: String
}

type Member {
  account: Account
  role: Role
  user: User
}

type Mutation {
  createAccount(input: CreateAccountInput!): Account
  createEvent(input: CreateEventInput!): Event
  createMember(input: CreateMemberInput!): Member
  deleteEvent(input: DeleteEventInput!): Event
  deleteMember(input: DeleteMemberInput!): Member
  findOrCreateUser(input: FindOrCreateUserInput!): User
  updateAccount(input: UpdateAccountInput!): Account
  updateEvent(input: UpdateEventInput!): Event
  updateMember(input: UpdateMemberInput!): Member
  updateUser(input: UpdateUserInput!): User
}

type Query {
  getAccount(id: ID!): Account
  getEvent(account_id: ID!, created_at: String!): Event
  getUser(id: ID!): User
  listAccounts(after: String, first: Int): AccountConnection!
  listEvents(account_id: ID!, before: String, first: Int): EventConnection
  listUsers(after: String, first: Int): UserConnection!
  me: User
}

type Subscription {
  onCreateAccount(created_at: String, id: ID, name: String): Account
    @aws_subscribe(mutations:["createAccount"])
  onCreateEvent(account_id: ID, created_at: String, id: ID, text: String, user_id: ID): Event
    @aws_subscribe(mutations:["createEvent"])
  onDeleteEvent(account_id: ID, created_at: String, id: ID, text: String, user_id: ID): Event
    @aws_subscribe(mutations:["deleteEvent"])
  onUpdateAccount(created_at: String, id: ID, name: String): Account
    @aws_subscribe(mutations:["updateAccount"])
  onUpdateEvent(account_id: ID, created_at: String, id: ID, text: String, user_id: ID): Event
    @aws_subscribe(mutations:["updateEvent"])
  onUpdateUser(created_at: String, email: String, id: ID, name: String): User
    @aws_subscribe(mutations:["updateUser"])
}

type User {
  avatar: Boolean
  created_at: String!
  email: String!
  id: ID!
  members: [Member!]!
  name: String!
  phone: String
  pictures: [String!]!
}

type UserConnection {
  items: [User!]!
  nextToken: String
}

enum Role {
  caregiver
  elder
  family
  neighbor
  owner
}

input CreateAccountInput {
  name: String!
  owner_id: ID!
}

input CreateEventInput {
  account_id: ID!
  created_at: String!
  id: ID!
  text: String!
  user_id: ID!
}

input CreateMemberInput {
  account_id: ID!
  role: Role!
  user_id: ID!
}

input DeleteEventInput {
  account_id: ID!
  created_at: String!
  user_id: ID!
}

input DeleteMemberInput {
  account_id: ID!
  user_id: ID!
}

input FindOrCreateUserInput {
  avatar: String
  email: String!
  id: ID!
  name: String!
  phone: String
  pictures: [String!]
}

input UpdateAccountInput {
  id: ID!
  name: String!
}

input UpdateEventInput {
  account_id: ID!
  created_at: String!
  id: ID
  text: String
  user_id: ID
}

input UpdateMemberInput {
  account_id: ID!
  role: Role!
  user_id: ID!
}

input UpdateUserInput {
  avatar: String
  email: String
  id: ID!
  name: String
  phone: String
  pictures: [String!]
}
